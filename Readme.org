#+title: Subatomic: The complete guide to design tokens
#+date: [2025-04-09 Wed]
#+description: Course about creating and managing design systems
#+startup: indent
#+auto_tangle: t
# #+property: header-args :results output

* Org mode & Emacs
- tangle :: ~org-babel-tangle~, ~C-c C-v C-t~
- auto-fill :: ~M-x auto-fill-mode~, enforce max size limit
- size paragraph :: ~M-q~

* Core concepts

** Definition
#+begin_quote
Design tokens are design properties stored as variables that help
create themeable user interfaces.
#+end_quote

#+begin_src css
  /* From */
  button {
      background-color: #aabbcc;
  }
  /* To */
  button {
      background-color: var(--ds-theme-color-background-brand);
  }
#+end_src

** Workflow
Creating a button, or updating the color and font:
- Plan :: define work to be done
- Design :: visual/UX design, create assets in design tool
- Review :: review with stakeholders, make some rounds of back and
  forth
- Build :: create HTML, CSS, and JS, create component API
- Test & QA :: a11y, content, functionality, responsive,
  cross-browser/device, i18n, unit tests, visual regression tests,
  stories, code review, design review
- Publish :: make the component available
- Adopt :: consuming app imports component, wires up to product
  context/content/backend/etc..
- Launch :: app publishes product work with component
- Maintain :: bug fixes, style tweaks, post-launch changes

** Separation of concerns
Before, it was just about:
- HTML :: structure of the document
- CSS :: style of the document
- JS :: behaviour of the document

Now, it's more *component system* vs *design token*
- Component system:
  - HTML :: Structure
  - CSS :: Structural style
  - JS :: Behaviour
- Design token
  - CSS :: Aesthetic style

** Design tokens properties
Design tokens are the design decisions stored in variables. They are
style properties stored as variables and serve as the implementation
agnostic source of truth for a design language.
They can be, in rough scopes:
- Colours
- Typography
- Spacing
- the rest:
  - border
  - shadow
  - animation
  - breakpoints
  - z-index


** MVP Token
*** Tier one
The most basic token:
#+name: basic html page
#+begin_src html :tangle basic.html
  <!DOCTYPE html>
  <html lang="en">
  <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <link rel="stylesheet" href="basic-tier2.css">
      <title>Basic HTML Page</title>
  </head>
  <body>
      <h1>Heading</h1>
      <button>Action</button>
  </body>
  </html>
#+end_src

#+name: basic (tier 1) css
#+begin_src css :tangle basic-tier1.css
  :root {
      --pink: #ea0a8e;
  }

  button {
      background-color: var(--pink);
      color: white;
      padding: 2rem 4rem;
      border: none;
      font-size: 2rem;
      font-weight: bold;
  }

  h1 {
      color: var(--pink);
      font-family: sans-serif;
  }
#+end_src

This is *Tier one* variable because the variable is the name of the
colour directly. If you change the value of that variable to a blue
colour, you have a variable pink encoding a blue colour. Best case is
that you have to rename that token to match the name of the new
colour.

*** Tier two
*Tier two* would encode the role of that token instead. You would name
 the token =brand= instead of =pink=, because this pink colour is the
 current brand colour.

#+name: basic (tier 2) css
#+begin_src css :tangle basic-tier2.css
  :root {
      /* Tier 1: Definition */
      --pink: #ea0a8e;
      --blue: #0004fb;

      /* Tier 2: Semantic */
      --brand: var(--pink);
  }

  button {
      background-color: var(--brand);
      color: white;
      padding: 2rem 4rem;
      border: none;
      font-size: 2rem;
      font-weight: bold;
  }

  h1 {
      color: var(--brand);
      font-family: sans-serif;
  }
#+end_src

*** Tier three
*Tier three* is refining the style at the component level.
#+name: basic (tier 3) css
#+begin_src css :tangle basic-tier3.css
  :root {
      /* Tier 1: Definition */
      --pink: #ea0a8e;
      --blue: #0004fb;

      /* Tier 2: Semantic */
      --brand: var(--pink);

      /* Tier 3: Component */
      --button-background: var(--blue);
  }

  button {
      background-color: var(--button-background);
      color: white;
      padding: 2rem 4rem;
      border: none;
      font-size: 2rem;
      font-weight: bold;
  }

  h1 {
      color: var(--brand);
      font-family: sans-serif;
  }
#+end_src
